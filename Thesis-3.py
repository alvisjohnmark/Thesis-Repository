# -*- coding: utf-8 -*-
"""initial_result_plots_thesis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14qGqMqEh5ieBqZKn3RPWx-B6I_DszH-0
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler
from google.colab import drive
drive.mount('/content/drive')

# file_path = '/content/drive/MyDrive/audio_features_25_soxrHQ_44_all_stacked_189.csv'
file_path = '/content/drive/MyDrive/thesis/audio_features_25_soxrHQ_44_dominant_all_stacked_169.csv'
# file_path = '/content/drive/MyDrive/thesis/audio_features_25_soxrHQ_44_all_stacked_189.csv'
df = pd.read_csv(file_path)

df

audio_features = [
    (range(0, 40), 'MFCC'),
    (range(40, 168), 'Mel-Spectrogram'),
    (range(168, 180), 'Chroma'),
    (range(180, 181), 'Spectral Rolloff'),
    (range(181, 182), 'Spectral Bandwidth'),
    (range(182, 183), 'Spectral Contrast'),
    (range(183, 184), 'Spectral Flatness'),
    (range(184, 185), 'Spectral Centroid'),
    (range(185, 186), 'RMS'),
    (range(186, 187), 'Tempo'),
    (range(187, 188), 'ZCR'),
]

# Map emotion labels to names
emotion_map = {0: "Happy", 1: "Angry", 2: "Sad", 3: "Calm"}
df['Emotion'] = df['label'].map(emotion_map)

# Plot each feature in a grid layout (11 rows, 2 columns)
fig, axes = plt.subplots(len(audio_features), 2, figsize=(20, 5 * len(audio_features)))

# Iterate over features
for i, (col_range, feature_name) in enumerate(audio_features):
    # Left plot: Density Plot
    ax_density = axes[i, 0]
    for emotion in df['Emotion'].unique():
        data = df[df['Emotion'] == emotion].iloc[:, col_range].values.flatten()
        sns.kdeplot(
            data,
            label=emotion,
            fill=True,
            ax=ax_density
        )
    ax_density.set_title(f'Density Plot of {feature_name}', fontsize=14)
    ax_density.set_xlabel(feature_name)
    ax_density.set_ylabel('Density')
    ax_density.legend()

    # Right plot: Box Plot
    ax_box = axes[i, 1]
    raw_data = df.iloc[:, col_range]
    melted_data = raw_data.melt(var_name='Feature', value_name=feature_name)
    melted_data['Emotion'] = df['Emotion'].repeat(len(col_range)).reset_index(drop=True)
    sns.boxplot(x='Emotion', y=feature_name, data=melted_data, ax=ax_box)
    ax_box.set_title(f'Box Plot of {feature_name}', fontsize=14)
    ax_box.set_xlabel('Emotion')
    ax_box.set_ylabel(feature_name)

# Adjust layout
plt.tight_layout()
plt.show()

# Create subplots (do NOT share y-axis)
fig, axes = plt.subplots(1, 3, figsize=(18, 6), sharey=False)

# Loop through feature groups and plot each
for i, (idx_range, feature_name) in enumerate(audio_features):
    values = df.iloc[:, list(idx_range)].values.flatten()

    sns.boxplot(y=values, ax=axes[i], color='lightblue', width=0.3)
    axes[i].set_title(feature_name)
    axes[i].set_xlabel('')
    axes[i].set_ylabel('Value')
    axes[i].grid(True)

# Add overall title
plt.suptitle('Multi-Valued Features', fontsize=16)
plt.tight_layout(rect=[0, 0.03, 1, 0.95])
plt.show()

emotions_name_dict = {0: 'Happy', 1: 'Angry', 2: 'Sad', 3: 'Calm'}

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load dataset
# df = pd.read_csv("your_dataset.csv")  # Replace with your actual file path

# Define feature groups
audio_features = [
    (range(0, 40), 'MFCC'),
    (range(40, 168), 'Mel-Spectrogram'),
    (range(168, 180), 'Chroma'),
]

# Get unique emotions
emotions = df['label'].unique()

# Loop through each emotion
for emotion in emotions[::-1]:
    # Filter rows by emotion
    emotion_df = df[df['label'] == emotion]


    # Create subplots (one row, three plots per emotion, not sharing y-axis)
    fig, axes = plt.subplots(1, 3, figsize=(9, 2.5), sharey=False)

    for i, (idx_range, feature_name) in enumerate(audio_features):
        values = emotion_df.iloc[:, list(idx_range)].values.flatten()
        sns.boxplot(y=values, ax=axes[i], color='lightblue', width=0.3)
        axes[i].set_title(feature_name)
        axes[i].set_xlabel('')
        axes[i].set_ylabel('Value')
        axes[i].grid(True)

    plt.suptitle(f'{emotions_name_dict[emotion]} Multi-Valued Features', fontsize=16)
    plt.tight_layout(rect=[0, 0.03, 1, 0.95])
    plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load dataset
# df = pd.read_csv("your_dataset.csv")  # Uncomment and replace with your dataset path

# Define feature groups
audio_features = [
    (range(180, 181), 'Spectral Rolloff'),
    (range(181, 182), 'Spectral Bandwidth'),
    (range(182, 183), 'Spectral Contrast'),
    (range(183, 184), 'Spectral Flatness'),
    (range(184, 185), 'Spectral Centroid'),
    (range(185, 186), 'RMS'),
    (range(186, 187), 'Tempo'),
    (range(187, 188), 'ZCR'),
]

# Get unique emotions
emotions = df['label'].unique()

# Loop through each feature
for idx_range, feature_name in audio_features:
    # Create one row with N subplots (one for each emotion)
    fig, axes = plt.subplots(1, len(emotions), figsize=(len(emotions) * 3.5, 4), sharey=True)

    for i, emotion in enumerate(emotions):
        emotion_df = df[df['label'] == emotion]
        feature_data = emotion_df.iloc[:, list(idx_range)].reset_index(drop=True)
        melted = feature_data.melt(var_name='Feature Index', value_name='Value')

        sns.boxplot(data=melted, y='Value', ax=axes[i], color='lightblue', width=0.3)
        axes[i].set_title(emotions_name_dict[emotion])
        axes[i].set_xlabel('')
        axes[i].set_ylabel('Value')
        axes[i].grid(True)

    plt.suptitle(f'{feature_name} Across Emotions', fontsize=16)
    plt.tight_layout(rect=[0, 0.03, 1, 0.95])
    plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Define features
audio_features = [
    (range(180, 181), 'Spectral Rolloff'),
    (range(181, 182), 'Spectral Bandwidth'),
    (range(182, 183), 'Spectral Contrast'),
    (range(183, 184), 'Spectral Flatness'),
    (range(184, 185), 'Spectral Centroid'),
    (range(185, 186), 'RMS'),
    (range(186, 187), 'Tempo'),
    (range(187, 188), 'ZCR'),
]

# Get unique emotions
emotions = df['label'].unique()
num_features = len(audio_features)
num_emotions = len(emotions)

# Create a big subplot grid: rows = features, cols = emotions
fig, axes = plt.subplots(num_features, num_emotions, figsize=(num_emotions * 3, num_features * 3), sharey='row')

# Loop through each feature and emotion
for i, (idx_range, feature_name) in enumerate(audio_features):
    for j, emotion in enumerate(emotions):
        ax = axes[i, j] if num_features > 1 else axes[j]
        emotion_df = df[df['label'] == emotion]
        feature_data = emotion_df.iloc[:, list(idx_range)].reset_index(drop=True)
        melted = feature_data.melt(var_name='Feature Index', value_name='Value')

        sns.boxplot(data=melted, y='Value', ax=ax, color='lightblue', width=0.3)

        if i == 0:
            ax.set_title(emotions_name_dict[emotion], fontsize=10)
        if j == 0:
            ax.set_ylabel(feature_name, fontsize=10)
        else:
            ax.set_ylabel('')
        ax.set_xlabel('')
        ax.grid(True)

# Overall title and spacing
plt.suptitle('Single-Valued Features per Emotion', fontsize=18)
plt.tight_layout(rect=[0, 0.03, 1, 0.95])
plt.show()

#kasta ba? kasla nag weird
emotion_labels = ['Happy', 'Angry', 'Sad', 'Calm']
feature_colors = sns.color_palette("husl", len(audio_features))

scaler = MinMaxScaler()
df_scaled = pd.DataFrame(scaler.fit_transform(df.iloc[:, :-1]), columns=df.columns[:-1])
df_scaled['label'] = df['label']

fig, axes = plt.subplots(2, 2, figsize=(18, 12))
fig.suptitle('Audio Features Per Emotion', fontsize=24)

axes = axes.flatten()

for emotion, ax in enumerate(axes):
    emotion_data = df_scaled[df_scaled['label'] == emotion]

    x_start = 0
    for (col_range, feature_name), color in zip(audio_features, feature_colors):
        feature_data = emotion_data.iloc[:, col_range].values.flatten()
        x_end = x_start + len(feature_data)
        x_values = np.linspace(x_start, x_end, len(feature_data))
        ax.scatter(x_values, feature_data, s=5, color=color, alpha=0.6, label=feature_name)
        x_start = x_end + 10

    ax.set_title(emotion_labels[emotion])
    ax.set_ylabel('Value', fontsize=10)
    ax.legend(loc="upper right", fontsize=8, markerscale=2)

plt.tight_layout(rect=[0, 0, 1, 0.95])
plt.show()